import { IContractRequest, IProvider, ITransaction, ITxOptionsRequest } from "@klever/kleverweb/dist/types/dtos";
declare class Account {
    constructor(privateKey?: string);
    getWalletAddress(): string;
    getProvider: () => IProvider;
    setProvider: (pvd: IProvider) => any;
    getAccount(): Promise<{
        Address: string;
        RootHash: string;
        Balance: number;
        Nonce: number;
        Allowance: number;
    }>;
    getNonce(): Promise<{
        firstPendingNonce: number;
        nonce: number;
        txPending: number;
    }>;
    buildTransaction: (contracts: IContractRequest[], txData?: string[] | undefined, options?: ITxOptionsRequest | undefined) => Promise<ITransaction>;
    signTransaction: (tx: ITransaction) => Promise<ITransaction>;
    validateSignature: (message: string, signature: string, publicKey: string) => Promise<boolean>;
    signMessage: (message: string, privateKey: string) => Promise<string>;
    broadcastTransactions: (transactions: ITransaction[]) => Promise<import("@klever/kleverweb/dist/types/dtos").IBroadcastResponse>;
}
export default Account;
