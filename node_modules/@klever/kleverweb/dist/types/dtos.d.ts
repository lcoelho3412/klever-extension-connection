import { IAssetTrigger, IBuyOrder, ICancelMarketOrder, IClaim, IConfigITO, IConfigMarketplace, IConfigValidator, ICreateAsset, ICreateMarketplace, ICreateValidator, IDelegate, IFreeze, IProposal, ISellOrder, ISetAccountName, ISetITOPrices, ITransfer, IUndelegate, IUnfreeze, IUnjail, IUpdateAccountPermission, IVotes, IWithdraw } from "./contracts";
import { TransactionType } from "./enums";
export interface ITransaction {
    RawData: {
        Sender: string;
        Nonce: number;
        Contract: IContract[];
        Data: string[];
        KAppFee: number;
        BandwidthFee: number;
        Version: number;
        ChainID: string;
        PermissionID: number;
    };
    Signature: string[];
}
export interface IFees {
    KAppFee: number;
    BandwidthFee: number;
    TotalFee: number;
}
export interface IContract {
    Parameter: IContractParameter;
}
export interface IContractParameter {
    type_url: string;
    value: string;
}
export interface ITxRequest {
    type: TransactionType;
    sender: string;
    nonce: number;
    contracts: IPayload[];
    data?: string[];
    permID?: number;
}
export interface IContractRequest {
    type: TransactionType;
    payload: IPayload;
}
export interface ITxOptionsRequest {
    nonce?: number;
    permID?: number;
}
export declare type IPayload = ITransfer | ICreateAsset | ICreateValidator | IConfigValidator | IFreeze | IUnfreeze | IDelegate | IUndelegate | IWithdraw | IClaim | IUnjail | IAssetTrigger | ISetAccountName | IProposal | IVotes | IConfigITO | ISetITOPrices | IBuyOrder | ISellOrder | ICancelMarketOrder | ICreateMarketplace | IConfigMarketplace | IUpdateAccountPermission;
export interface IBroadcastResponse {
    data: {
        txsHashes: string[];
    };
    error: string;
    code: string;
}
export interface IProvider {
    node: string;
    api: string;
}
export interface IAccountNonce {
    data: {
        firstPendingNonce: number;
        nonce: number;
        txPending: number;
    };
    error: string;
    code: string;
}
interface IRequest {
    error: string;
    code: string;
}
export interface IAccount extends IRequest {
    data: {
        account: {
            balance: number;
        };
    };
}
export {};
