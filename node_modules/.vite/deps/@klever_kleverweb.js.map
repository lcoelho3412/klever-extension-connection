{
  "version": 3,
  "sources": ["../../@klever/kleverweb/dist/index.js"],
  "sourcesContent": ["export class KleverWeb {\n    constructor(address, pvd) {\n        if (address && address.length != 62) {\n            throw \"invalid address length\";\n        }\n        const provider = {\n            node: pvd?.node || \"https://node.mainnet.klever.finance\",\n            api: pvd?.api || \"https://api.mainnet.klever.finance\",\n        };\n        if (!globalThis.kleverWeb) {\n            globalThis.kleverWeb = {\n                address: address || \"\",\n                provider,\n            };\n        }\n        else {\n            globalThis.kleverWeb.address = address || \"\";\n            globalThis.kleverWeb.provider = provider;\n        }\n    }\n    setWalletAddress = (address) => {\n        if (address.length != 62) {\n            throw \"invalid address length\";\n        }\n        globalThis.kleverWeb.address = address;\n    };\n    getWalletAddress = () => {\n        return globalThis.kleverWeb.address;\n    };\n    setProvider = (provider) => {\n        globalThis.kleverWeb.provider = provider;\n    };\n    getProvider = () => {\n        return globalThis.kleverWeb.provider;\n    };\n    getBalance = async () => {\n        const request = await fetch(`${globalThis.kleverWeb.provider.api}/v1.0/address/${globalThis.kleverWeb.address}`);\n        if (!request.ok) {\n            throw new Error(`Failed to fetch balance: ${request.statusText}`);\n        }\n        const response = await request.json();\n        if (response.code !== \"successful\") {\n            throw new Error(`Error fetching balance of account ${globalThis.kleverWeb.address}: ${response.error}`);\n        }\n        return response.data.account.balance;\n    };\n    getNonce = async () => {\n        const req = await fetch(`${globalThis.kleverWeb.provider.node}/address/${globalThis.kleverWeb.address}/nonce`);\n        return (await req.json());\n    };\n    buildTransaction = async (contracts, txData, options) => {\n        if (contracts?.length === 0) {\n            throw \"empty contracts\";\n        }\n        const fistContractType = contracts[0]?.type;\n        const payloads = contracts.map((contract) => {\n            if (contract.type != fistContractType) {\n                throw \"Multiple contracts of different types are not supported yet\";\n            }\n            return contract.payload;\n        });\n        const nonce = options?.nonce\n            ? options.nonce\n            : (await this.getNonce())?.data?.nonce || 0;\n        const permID = options?.permID || 0;\n        const txBody = {\n            type: fistContractType,\n            nonce,\n            sender: globalThis.kleverWeb.address,\n            data: txData || [],\n            permID,\n            contracts: payloads,\n        };\n        const req = await fetch(`${globalThis.kleverWeb.provider.node}/transaction/send`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(txBody),\n        });\n        const res = await req.json();\n        if (res?.error)\n            throw res?.error;\n        if (!res?.data && !res?.data?.result) {\n            throw \"failed to generate transaction\";\n        }\n        return res.data.result;\n    };\n    getFees = async (contracts, txData, options) => {\n        const tx = await this.buildTransaction(contracts, txData, options);\n        const KAppFee = tx.RawData.KAppFee;\n        const BandwidthFee = tx.RawData.BandwidthFee;\n        return {\n            KAppFee,\n            BandwidthFee,\n            TotalFee: KAppFee + BandwidthFee,\n        };\n    };\n    broadcastTransactions = async (txs) => {\n        const res = await fetch(`${globalThis.kleverWeb.provider.node}/transaction/broadcast`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ txs: [...txs] }),\n        });\n        return await res.json();\n    };\n    signTransaction = globalThis?.kleverWeb?.signTransaction;\n    signMessage = globalThis?.kleverWeb?.signMessage;\n    validateSignature = globalThis?.kleverWeb?.validateSignature;\n}\nexport default KleverWeb;\n"],
  "mappings": "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",
  "names": ["_a", "_b", "_c"]
}
