import {
  __publicField
} from "./chunk-DSTXS4JB.js";

// node_modules/@klever/kleverweb/dist/index.js
var _a, _b, _c;
var KleverWeb = class {
  constructor(address, pvd) {
    __publicField(this, "setWalletAddress", (address) => {
      if (address.length != 62) {
        throw "invalid address length";
      }
      globalThis.kleverWeb.address = address;
    });
    __publicField(this, "getWalletAddress", () => {
      return globalThis.kleverWeb.address;
    });
    __publicField(this, "setProvider", (provider) => {
      globalThis.kleverWeb.provider = provider;
    });
    __publicField(this, "getProvider", () => {
      return globalThis.kleverWeb.provider;
    });
    __publicField(this, "getBalance", async () => {
      const request = await fetch(`${globalThis.kleverWeb.provider.api}/v1.0/address/${globalThis.kleverWeb.address}`);
      if (!request.ok) {
        throw new Error(`Failed to fetch balance: ${request.statusText}`);
      }
      const response = await request.json();
      if (response.code !== "successful") {
        throw new Error(`Error fetching balance of account ${globalThis.kleverWeb.address}: ${response.error}`);
      }
      return response.data.account.balance;
    });
    __publicField(this, "getNonce", async () => {
      const req = await fetch(`${globalThis.kleverWeb.provider.node}/address/${globalThis.kleverWeb.address}/nonce`);
      return await req.json();
    });
    __publicField(this, "buildTransaction", async (contracts, txData, options) => {
      var _a2, _b2, _c2, _d;
      if ((contracts == null ? void 0 : contracts.length) === 0) {
        throw "empty contracts";
      }
      const fistContractType = (_a2 = contracts[0]) == null ? void 0 : _a2.type;
      const payloads = contracts.map((contract) => {
        if (contract.type != fistContractType) {
          throw "Multiple contracts of different types are not supported yet";
        }
        return contract.payload;
      });
      const nonce = (options == null ? void 0 : options.nonce) ? options.nonce : ((_c2 = (_b2 = await this.getNonce()) == null ? void 0 : _b2.data) == null ? void 0 : _c2.nonce) || 0;
      const permID = (options == null ? void 0 : options.permID) || 0;
      const txBody = {
        type: fistContractType,
        nonce,
        sender: globalThis.kleverWeb.address,
        data: txData || [],
        permID,
        contracts: payloads
      };
      const req = await fetch(`${globalThis.kleverWeb.provider.node}/transaction/send`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(txBody)
      });
      const res = await req.json();
      if (res == null ? void 0 : res.error)
        throw res == null ? void 0 : res.error;
      if (!(res == null ? void 0 : res.data) && !((_d = res == null ? void 0 : res.data) == null ? void 0 : _d.result)) {
        throw "failed to generate transaction";
      }
      return res.data.result;
    });
    __publicField(this, "getFees", async (contracts, txData, options) => {
      const tx = await this.buildTransaction(contracts, txData, options);
      const KAppFee = tx.RawData.KAppFee;
      const BandwidthFee = tx.RawData.BandwidthFee;
      return {
        KAppFee,
        BandwidthFee,
        TotalFee: KAppFee + BandwidthFee
      };
    });
    __publicField(this, "broadcastTransactions", async (txs) => {
      const res = await fetch(`${globalThis.kleverWeb.provider.node}/transaction/broadcast`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ txs: [...txs] })
      });
      return await res.json();
    });
    __publicField(this, "signTransaction", (_a = globalThis == null ? void 0 : globalThis.kleverWeb) == null ? void 0 : _a.signTransaction);
    __publicField(this, "signMessage", (_b = globalThis == null ? void 0 : globalThis.kleverWeb) == null ? void 0 : _b.signMessage);
    __publicField(this, "validateSignature", (_c = globalThis == null ? void 0 : globalThis.kleverWeb) == null ? void 0 : _c.validateSignature);
    if (address && address.length != 62) {
      throw "invalid address length";
    }
    const provider = {
      node: (pvd == null ? void 0 : pvd.node) || "https://node.mainnet.klever.finance",
      api: (pvd == null ? void 0 : pvd.api) || "https://api.mainnet.klever.finance"
    };
    if (!globalThis.kleverWeb) {
      globalThis.kleverWeb = {
        address: address || "",
        provider
      };
    } else {
      globalThis.kleverWeb.address = address || "";
      globalThis.kleverWeb.provider = provider;
    }
  }
};
var dist_default = KleverWeb;
export {
  KleverWeb,
  dist_default as default
};
//# sourceMappingURL=@klever_kleverweb.js.map
